# ZFDocumentor
#
# LICENSE
#
# This source file is subject to the new BSD license that is bundled
# with this package in the file LICENSE.txt.
# If you did not receive a copy of the license and are unable to
# obtain it through the world-wide-web, please send an email
# to perraud.mickael@orange.fr so we can send you a copy immediately.
#
# @category  Documentation
# @author    Mickael Perraud <mikaelkael@php.net>
# @copyright   Copyright (c) 2010-2011 Mickael Perraud <perraud.mickael@orange.fr>
# @license    http://framework.zend.com/license/new-bsd     New BSD License

#
# Makefile - build Zend Framework documentation
#
# Main targets:
#  all - render DocBook manual in HTML.
#  clean - remove staged files.
#  check - validate DocBook manual using xmllint.
#  check1 - validate one DocBook XML file using xmllint.
#    Requires that you set the XMLFILE variable.
#

# -- parameters you are likely to want to change --

# XMLFILE is the name of one DocBook XML file that you want to
#   test with xmllint, using the 'check1' target.

FOP=@FOP@
XSLTPROC=@XSLTPROC@
XMLLINT=@XMLLINT@
ECSRC=@ECSRC@
HERE=@HERE@
HHC=@HHC@

# External link (could be set via ENVIRONMENT variable)
DOCBOOK_DTD=http://framework.zend.com/docbook/xml/4.5/docbookx.dtd

MANUAL_XML=manual.xml
MANUAL_LINT_XML=manual-lint.xml.in
MODULE=module_specs

XMLFILE=
ZF_LANG=en
ZF_VERSION=1.11

# "make" or "make -e"
all:	$(MANUAL_XML) htmlhelp

$(MANUAL_XML): ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/$(MANUAL_XML).in rev-svn
	@echo "Creating temporary manual and preprocessing it..."
	@rm -Rf ./temp/files/
	@rm -Rf ./temp/en/
	@mkdir ./temp/files/
	@sed -e 's!@DOCBOOK_DTD@!$(DOCBOOK_DTD)!' -e 's!"../en/!"!' $< > ./temp/files/$@
	@mkdir ./temp/en/
	@mkdir ./temp/en/ref/
	@mkdir ./temp/files/ref/
	@mkdir ./temp/files/module_specs/
	@mkdir ./temp/files/tutorials/
	@cp ./xinclude.mod ./temp/files/xinclude.mod
	@cp ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/ref/* ./temp/en/ref/
	@cp ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/ref/* ./temp/files/ref/
	@cp ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/module_specs/* ./temp/files/module_specs/
	@[ -d ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/tutorials ] || mkdir ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/tutorials
	@touch ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/tutorials/remove
	@cp ../standard/branches/release-$(ZF_VERSION)/documentation/manual/en/tutorials/* ./temp/files/tutorials/
	@[ -d ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/ref ] || mkdir ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/ref
	@cp ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/ref/* ./temp/files/ref/
	@[ -d ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/module_specs ] || mkdir ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/module_specs
	@cp ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/module_specs/* ./temp/files/module_specs/
	@[ -d ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/tutorials ] || mkdir ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/tutorials
	@touch ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/tutorials/to_remove
	@cp ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG)/tutorials/* ./temp/files/tutorials/
	@find . -wholename './temp/files/*.xml' -print0 | xargs -0 sed --regexp-extended --in-place 's#../../en/module_specs/##g'
	@php -f scripts/IntegrateExtras.php $(ZF_LANG) $(ZF_VERSION)
	@[ -d output ] || mkdir output
	@$(XMLLINT) --xinclude --output ./temp/manual.xml ./temp/files/$(MANUAL_XML)
	@php -f scripts/ManualXML.php $(ZF_VERSION)
	@rm -Rf ./temp/files/

docbook-migration: $(MANUAL_XML)
	$(XSLTPROC) --xinclude ./tools/db4-upgrade.xsl ./temp/manual.xml > ./temp/manual-db5.xml

rev-svn:
	@[ -d temp ] || mkdir temp
	@export LANG=en_US.UTF8
	@svn info ../standard/branches/release-$(ZF_VERSION)/documentation/manual/$(ZF_LANG) | grep '^Last Changed Rev' | sed -e 's!Last Changed Rev: !!m' -e 's!(\n)!!' > ./temp/svn_rev \
	    || @echo "Impossible to read svn revision"

# Build the docs in HTML format
website: html zipdoc

html: docbook-migration
	@if [ -d output/website/$(ZF_VERSION)/$(ZF_LANG)/ ] ; then \
	    echo "Rendering already done" ; \
	else \
	    rm -Rf output/website/$(ZF_VERSION)/$(ZF_LANG)/ ; \
	    echo "Rendering the whole manual as html..." ; \
	    ./phd --xinclude --forceindex -f xhtml -P Mkk -o output/website/$(ZF_VERSION)/$(ZF_LANG) -d ./temp/manual-db5.xml ; \
	fi
	@[ -d output/website/images  ] || mkdir  output/website/images
	@[ -d output/website/scripts ] || mkdir  output/website/scripts
	@[ -d output/website/styles  ] || mkdir  output/website/styles
	@cp -f images/*.* output/website/images
	@cp -f styles/*.* output/website/styles
	@cp -f javascripts/*.* output/website/scripts

highlight:
	@php -f scripts/HighlightHTML.php website $(ZF_VERSION) $(ZF_LANG)

zipdoc:
	@[ -d docs  ] || mkdir docs
	@rm -Rf temp/zfdoc
	@mkdir temp/zfdoc
	@mkdir  temp/zfdoc/figures
	@mkdir  temp/zfdoc/images
	@mkdir  temp/zfdoc/scripts
	@mkdir  temp/zfdoc/styles
	@cp -R output/website/$(ZF_VERSION)/$(ZF_LANG)/* temp/zfdoc
	@[ -f temp/zfdoc/index.sqlite ] && rm temp/zfdoc/index.sqlite
	@cp -R output/website/figures/*.* temp/zfdoc/figures
	@cp -f images/*.* temp/zfdoc/images
	@cp -f styles/*.* temp/zfdoc/styles
	@cp -f javascripts/*.* temp/zfdoc/scripts
	@(cd temp; find -name '*.html' -print0 | xargs -0 sed --regexp-extended --in-place 's/src="\/images\//src="images\//;s/href="\/styles\//href="styles\//;s/src="\/scripts\//src="scripts\//')
	@echo '#alternateDoc{display:none;}' >> temp/zfdoc/styles/zfdocumentor.css
	@echo '.editions{display:none;}' >> temp/zfdoc/styles/zfdocumentor.css
	@echo '#searchZf{display:none;}' >> temp/zfdoc/styles/zfdocumentor.css
	@echo '#header{height:60px;}' >> temp/zfdoc/styles/zfdocumentor.css
	@(cd temp ; zip -q -r ../docs/Zend_Framework_$(ZF_VERSION).x_$(ZF_LANG).zip zfdoc)

lucene:
	@php -f tools/IndexLucene.php $(ZF_VERSION) $(ZF_LANG)

htmlhelp: docbook-migration
	@rm -Rf output/htmlhelp/$(ZF_LANG)/
	@echo "Rendering the whole manual as htmlhelp..."
	@[ -d figures ] || mkdir figures
	@cp -f ../standard/trunk/documentation/manual/en/figures/*.* figures
	phd -g 'phpdotnet\phd\Highlighter_GeSHi' --xinclude -f xhtml -d ./temp/manual-db5.xml
	@mkdir -p output/htmlhelp/$(ZF_LANG)/figures
	@mkdir -p output/htmlhelp/$(ZF_LANG)/images
	@cp -f ../standard/trunk/documentation/manual/en/figures/*.* output/htmlhelp/$(ZF_LANG)/figures
	@cp -f styles/*.* output/htmlhelp/$(ZF_LANG)/

chm: htmlhelp
#	$(HHC) ./output/htmlhelp/$(ZF_LANG)/htmlhelp.hhp

chm-full:
	$(MAKE) -e chm ZF_LANG=en
	$(MAKE) -e chm ZF_LANG=fr
	$(MAKE) -e chm ZF_LANG=de
	$(MAKE) -e chm ZF_LANG=ja
	#$(MAKE) -e chm ZF_LANG=ru
	#$(MAKE) -e chm ZF_LANG=zh

html-full:
	$(MAKE) -e html ZF_LANG=en
	$(MAKE) -e html ZF_LANG=fr
	$(MAKE) -e html ZF_LANG=de
	$(MAKE) -e html ZF_LANG=ja
	#$(MAKE) -e html ZF_LANG=ru
	#$(MAKE) -e html ZF_LANG=zh
	@php -f PrepareMKK.php html/$(ZF_LANG)

# Build the docs in PDF format
pdf: $(MANUAL_XML) $(PDF_XSL)
	@$(XSLTPROC) --xinclude --output ./temp/Zend_Framework_$(ZF_LANG).fo ./temp/$(PDF_XSL) ./temp/manual.xml
	@[ -d output/pdf ] || mkdir output/pdf
	@php -f scripts/HighlightPDF.php $(ZF_LANG)

pdf-fop: pdf
	@echo "Rendering the whole manual as pdf with fop..."
	@"$(FOP)" -l fr -c fop.cfg -fo ./temp/Zend_Framework_$(ZF_LANG).fo -pdf ./output/pdf/Zend_Framework_$(ZF_LANG).pdf
	#@php -f scripts/PostPDF.php $(ZF_LANG)

pdf-full:
	$(MAKE) -e pdf-fop ZF_LANG=en
	$(MAKE) -e pdf-fop ZF_LANG=fr
	$(MAKE) -e pdf-fop ZF_LANG=de
	$(MAKE) -e pdf-fop ZF_LANG=ja
	#$(MAKE) -e pdf-fop ZF_LANG=ru
	#$(MAKE) -e pdf-fop ZF_LANG=zh

# checking manual
check: $(MANUAL_XML)
	@echo "Checking the whole manual..."
	@$(XMLLINT) --valid --noout --postvalid ./temp/manual.xml && echo "OK"

check1: $(MANUAL_LINT_XML)
	@if [ -n "$(XMLFILE)" ] ; then \
	    if [ -f "$(MODULE)/$(XMLFILE)" ] ; then \
		@echo "Checking $(XMLFILE)..." ; \
		@sed -e 's!@XMLFILE@!$(MODULE)/$(XMLFILE)!' -e 's!@DOCBOOK_DTD@!$(DOCBOOK_DTD)!' $(MANUAL_LINT_XML) \
		| $(XMLLINT) --xinclude --output ./temp/$(XMLFILE) - ; \
		@$(XMLLINT) --valid --noout --postvalid ./temp/$(XMLFILE) \
		  && echo "OK" ; \
	    else  \
		@echo "File $(MODULE)/$(XMLFILE) not found." ; \
	    fi ; \
	else \
	    @echo "Please specify a filename, e.g. 'make XMLFILE=filename.xml lint'" ; \
	fi

check-full:
	$(MAKE) -e check ZF_LANG=en
	$(MAKE) -e check ZF_LANG=fr
	$(MAKE) -e check ZF_LANG=de
	$(MAKE) -e check ZF_LANG=ja
	#$(MAKE) -e check ZF_LANG=ru
	#$(MAKE) -e check ZF_LANG=zh

# cleaning
clean:
	-rm -Rf ./output/website
	-rm -Rf ./temp

cleanall: clean
	-rm -Rf ./output
	-rm -f config.* configure
	-rm -rf autom4te.cache
	-rm -f Makefile
	-rm -f $(HTML_XSL) $(MANUAL_XML)

full: check-full html-full chm-full pdf-full